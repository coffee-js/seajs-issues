{
  "url": "https://api.github.com/repos/seajs/seajs/issues/242",
  "labels_url": "https://api.github.com/repos/seajs/seajs/issues/242/labels{/name}",
  "comments_url": "https://api.github.com/repos/seajs/seajs/issues/242/comments",
  "events_url": "https://api.github.com/repos/seajs/seajs/issues/242/events",
  "html_url": "https://github.com/seajs/seajs/issues/242",
  "id": 5382447,
  "number": 242,
  "title": "CMD 模块定义规范",
  "user": {
    "login": "lifesinger",
    "id": 97227,
    "avatar_url": "https://1.gravatar.com/avatar/db33090541526c03c798f82aa0a5dbaa?d=https%3A%2F%2Fidenticons.github.com%2Fc29e2f0d02014ac5e5d125370865fc0d.png",
    "gravatar_id": "db33090541526c03c798f82aa0a5dbaa",
    "url": "https://api.github.com/users/lifesinger",
    "html_url": "https://github.com/lifesinger",
    "followers_url": "https://api.github.com/users/lifesinger/followers",
    "following_url": "https://api.github.com/users/lifesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/lifesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lifesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lifesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/lifesinger/orgs",
    "repos_url": "https://api.github.com/users/lifesinger/repos",
    "events_url": "https://api.github.com/users/lifesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lifesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "url": "https://api.github.com/repos/seajs/seajs/labels/documentation",
      "name": "documentation",
      "color": "444444"
    }
  ],
  "state": "closed",
  "assignee": null,
  "milestone": {
    "url": "https://api.github.com/repos/seajs/seajs/milestones/12",
    "labels_url": "https://api.github.com/repos/seajs/seajs/milestones/12/labels",
    "id": 368419,
    "number": 12,
    "title": "2.1.1",
    "description": "",
    "creator": {
      "login": "lifesinger",
      "id": 97227,
      "avatar_url": "https://1.gravatar.com/avatar/db33090541526c03c798f82aa0a5dbaa?d=https%3A%2F%2Fidenticons.github.com%2Fc29e2f0d02014ac5e5d125370865fc0d.png",
      "gravatar_id": "db33090541526c03c798f82aa0a5dbaa",
      "url": "https://api.github.com/users/lifesinger",
      "html_url": "https://github.com/lifesinger",
      "followers_url": "https://api.github.com/users/lifesinger/followers",
      "following_url": "https://api.github.com/users/lifesinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/lifesinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lifesinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lifesinger/subscriptions",
      "organizations_url": "https://api.github.com/users/lifesinger/orgs",
      "repos_url": "https://api.github.com/users/lifesinger/repos",
      "events_url": "https://api.github.com/users/lifesinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lifesinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 10,
    "state": "closed",
    "created_at": "2013-07-01T23:14:04Z",
    "updated_at": "2013-07-19T00:59:34Z",
    "due_on": "2013-07-31T07:00:00Z"
  },
  "comments": 16,
  "created_at": "2012-07-02T09:21:26Z",
  "updated_at": "2013-10-14T08:37:37Z",
  "closed_at": "2012-07-06T22:35:04Z",
  "pull_request": {
    "html_url": null,
    "diff_url": null,
    "patch_url": null
  },
  "body": "# CMD 模块定义规范\r\n\r\n在 Sea.js 中，所有 JavaScript 模块都遵循 CMD（[Common Module Definition](https://github.com/cmdjs/specification/blob/master/draft/module.md)） 模块定义规范。该规范明确了模块的基本书写格式和基本交互规则。\r\n\r\n在 CMD 规范中，一个模块就是一个文件。代码的书写格式如下：\r\n\r\n```js\r\ndefine(factory);\r\n```\r\n\r\n\r\n\r\n## define `Function`\r\n\r\n`define` 是一个全局函数，用来定义模块。\r\n\r\n\r\n### define `define(factory)`\r\n\r\n`define` 接受 `factory` 参数，`factory` 可以是一个函数，也可以是一个对象或字符串。\r\n\r\n`factory` 为对象、字符串时，表示模块的接口就是该对象、字符串。比如可以如下定义一个 JSON 数据模块：\r\n\r\n```js\r\ndefine({ \"foo\": \"bar\" });\r\n```\r\n\r\n也可以通过字符串定义模板模块：\r\n\r\n```js\r\ndefine('I am a template. My name is {{name}}.');\r\n```\r\n\r\n`factory` 为函数时，表示是模块的构造方法。执行该构造方法，可以得到模块向外提供的接口。`factory` 方法在执行时，默认会传入三个参数：`require`、`exports` 和 `module`：\r\n\r\n```js\r\ndefine(function(require, exports, module) {\r\n\r\n  // 模块代码\r\n\r\n});\r\n```\r\n\r\n\r\n### define `define(id?, deps?, factory)`\r\n\r\n`define` 也可以接受两个以上参数。字符串 `id` 表示模块标识，数组 `deps` 是模块依赖。比如：\r\n\r\n```js\r\ndefine('hello', ['jquery'], function(require, exports, module) {\r\n\r\n  // 模块代码\r\n\r\n});\r\n```\r\n\r\n`id` 和 `deps` 参数可以省略。省略时，可以通过构建工具自动生成。\r\n\r\n**注意**：带 `id` 和 `deps` 参数的 `define` 用法不属于 CMD 规范，而属于 [Modules/Transport](https://github.com/cmdjs/specification/blob/master/draft/transport.md) 规范。\r\n\r\n\r\n### define.cmd `Object`\r\n\r\n一个空对象，可用来判定当前页面是否有 CMD 模块加载器：\r\n\r\n```js\r\nif (typeof define === \"function\" && define.cmd) {\r\n  // 有 Sea.js 等 CMD 模块加载器存在\r\n}\r\n```\r\n\r\n\r\n\r\n## require `Function`\r\n\r\n`require` 是 `factory` 函数的第一个参数。\r\n\r\n\r\n### require `require(id)`\r\n\r\n`require` 是一个方法，接受 [模块标识](https://github.com/seajs/seajs/issues/258) 作为唯一参数，用来获取其他模块提供的接口。\r\n\r\n```js\r\ndefine(function(require, exports) {\r\n\r\n  // 获取模块 a 的接口\r\n  var a = require('./a');\r\n\r\n  // 调用模块 a 的方法\r\n  a.doSomething();\r\n\r\n});\r\n```\r\n\r\n**注意**：在开发时，`require` 的书写需要遵循一些 [简单约定](https://github.com/seajs/seajs/issues/259)。\r\n\r\n\r\n### require.async `require.async(id, callback?)`\r\n\r\n`require.async` 方法用来在模块内部异步加载模块，并在加载完成后执行指定回调。`callback` 参数可选。\r\n\r\n```js\r\ndefine(function(require, exports, module) {\r\n\r\n  // 异步加载一个模块，在加载完成时，执行回调\r\n  require.async('./b', function(b) {\r\n    b.doSomething();\r\n  });\r\n\r\n  // 异步加载多个模块，在加载完成时，执行回调\r\n  require.async(['./c', './d'], function(c, d) {\r\n    c.doSomething();\r\n    d.doSomething();\r\n  });\r\n\r\n});\r\n```\r\n\r\n**注意**：`require` 是同步往下执行，`require.async` 则是异步回调执行。`require.async` 一般用来加载可延迟异步加载的模块。\r\n\r\n\r\n### require.resolve `require.resolve(id)`\r\n\r\n使用模块系统内部的路径解析机制来解析并返回模块路径。该函数不会加载模块，只返回解析后的绝对路径。\r\n\r\n```js\r\ndefine(function(require, exports) {\r\n\r\n  console.log(require.resolve('./b'));\r\n  // ==> http://example.com/path/to/b.js\r\n\r\n});\r\n```\r\n\r\n这可以用来获取模块路径，一般用在插件环境或需动态拼接模块路径的场景下。\r\n\r\n\r\n## exports `Object`\r\n\r\n`exports` 是一个对象，用来向外提供模块接口。\r\n\r\n```js\r\ndefine(function(require, exports) {\r\n\r\n  // 对外提供 foo 属性\r\n  exports.foo = 'bar';\r\n\r\n  // 对外提供 doSomething 方法\r\n  exports.doSomething = function() {};\r\n\r\n});\r\n```\r\n\r\n除了给 `exports` 对象增加成员，还可以使用 `return` 直接向外提供接口。\r\n\r\n```js\r\ndefine(function(require) {\r\n\r\n  // 通过 return 直接提供接口\r\n  return {\r\n    foo: 'bar',\r\n    doSomething: function() {};\r\n  };\r\n\r\n});\r\n```\r\n\r\n如果 `return` 语句是模块中的唯一代码，还可简化为：\r\n\r\n```js\r\ndefine({\r\n  foo: 'bar',\r\n  doSomething: function() {};\r\n});\r\n```\r\n\r\n上面这种格式特别适合定义 JSONP 模块。\r\n\r\n\r\n**特别注意**：下面这种写法是错误的！\r\n\r\n```js\r\ndefine(function(require, exports) {\r\n\r\n  // 错误用法！！!\r\n  exports = {\r\n    foo: 'bar',\r\n    doSomething: function() {};\r\n  };\r\n\r\n});\r\n```\r\n\r\n正确的写法是用 `return` 或者给 `module.exports` 赋值：\r\n\r\n```js\r\ndefine(function(require, exports, module) {\r\n\r\n  // 正确写法\r\n  module.exports = {\r\n    foo: 'bar',\r\n    doSomething: function() {};\r\n  };\r\n\r\n});\r\n```\r\n\r\n**提示**：`exports` 仅仅是 `module.exports` 的一个引用。在 `factory` 内部给 `exports` 重新赋值时，并不会改变 `module.exports` 的值。因此给 `exports` 赋值是无效的，不能用来更改模块接口。\r\n\r\n\r\n## module `Object`\r\n\r\n`module` 是一个对象，上面存储了与当前模块相关联的一些属性和方法。\r\n\r\n\r\n### module.id `String`\r\n\r\n模块的唯一标识。\r\n\r\n```js\r\ndefine('id', [], function(require, exports, module) {\r\n\r\n  // 模块代码\r\n\r\n});\r\n```\r\n\r\n上面代码中，`define` 的第一个参数就是模块标识。\r\n\r\n\r\n### module.uri `String`\r\n\r\n根据模块系统的路径解析规则得到的模块绝对路径。\r\n\r\n```js\r\ndefine(function(require, exports, module) {\r\n  \r\n  console.log(module.uri); \r\n  // ==> http://example.com/path/to/this/file.js\r\n\r\n});\r\n```\r\n\r\n一般情况下（没有在 `define` 中手写 `id` 参数时），`module.id` 的值就是 `module.uri`，两者完全相同。\r\n\r\n\r\n### module.dependencies `Array`\r\n\r\n`dependencies` 是一个数组，表示当前模块的依赖。\r\n\r\n\r\n### module.exports `Object`\r\n\r\n当前模块对外提供的接口。\r\n\r\n传给 `factory` 构造方法的 `exports` 参数是 `module.exports` 对象的一个引用。只通过 `exports` 参数来提供接口，有时无法满足开发者的所有需求。 比如当模块的接口是某个类的实例时，需要通过 `module.exports` 来实现：\r\n\r\n```js\r\ndefine(function(require, exports, module) {\r\n\r\n  // exports 是 module.exports 的一个引用\r\n  console.log(module.exports === exports); // true\r\n\r\n  // 重新给 module.exports 赋值\r\n  module.exports = new SomeClass();\r\n\r\n  // exports 不再等于 module.exports\r\n  console.log(module.exports === exports); // false\r\n\r\n});\r\n```\r\n\r\n**注意**：对 `module.exports` 的赋值需要同步执行，不能放在回调函数里。下面这样是不行的：\r\n\r\n```js\r\n// x.js\r\ndefine(function(require, exports, module) {\r\n\r\n  // 错误用法\r\n  setTimeout(function() {\r\n    module.exports = { a: \"hello\" };\r\n  }, 0);\r\n\r\n});\r\n```\r\n\r\n在 y.js 里有调用到上面的 x.js: \r\n\r\n```js\r\n// y.js\r\ndefine(function(require, exports, module) {\r\n\r\n  var x = require('./x');\r\n\r\n  // 无法立刻得到模块 x 的属性 a\r\n  console.log(x.a); // undefined\r\n\r\n});\r\n```\r\n\r\n\r\n\r\n## 小结\r\n\r\n这就是 CMD 模块定义规范的所有内容。经常使用的 API 只有 `define`, `require`, `require.async`, `exports`, `module.exports` 这五个。其他 API 有个印象就好，在需要时再来查文档，不用刻意去记。\r\n \r\n与 RequireJS 的 AMD 规范相比，CMD 规范尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。通过 CMD 规范书写的模块，可以很容易在 Node.js 中运行，后续会介绍。\r\n\r\n祝使用愉快，有任何想法建议，欢迎反馈留言。\r\n\r\n",
  "closed_by": {
    "login": "lifesinger",
    "id": 97227,
    "avatar_url": "https://1.gravatar.com/avatar/db33090541526c03c798f82aa0a5dbaa?d=https%3A%2F%2Fidenticons.github.com%2Fc29e2f0d02014ac5e5d125370865fc0d.png",
    "gravatar_id": "db33090541526c03c798f82aa0a5dbaa",
    "url": "https://api.github.com/users/lifesinger",
    "html_url": "https://github.com/lifesinger",
    "followers_url": "https://api.github.com/users/lifesinger/followers",
    "following_url": "https://api.github.com/users/lifesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/lifesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lifesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lifesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/lifesinger/orgs",
    "repos_url": "https://api.github.com/users/lifesinger/repos",
    "events_url": "https://api.github.com/users/lifesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lifesinger/received_events",
    "type": "User",
    "site_admin": false
  }
}
