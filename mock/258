{
  "url": "https://api.github.com/repos/seajs/seajs/issues/258",
  "labels_url": "https://api.github.com/repos/seajs/seajs/issues/258/labels{/name}",
  "comments_url": "https://api.github.com/repos/seajs/seajs/issues/258/comments",
  "events_url": "https://api.github.com/repos/seajs/seajs/issues/258/events",
  "html_url": "https://github.com/seajs/seajs/issues/258",
  "id": 5466689,
  "number": 258,
  "title": "模块标识",
  "user": {
    "login": "lifesinger",
    "id": 97227,
    "avatar_url": "https://2.gravatar.com/avatar/db33090541526c03c798f82aa0a5dbaa?d=https%3A%2F%2Fidenticons.github.com%2Fc29e2f0d02014ac5e5d125370865fc0d.png",
    "gravatar_id": "db33090541526c03c798f82aa0a5dbaa",
    "url": "https://api.github.com/users/lifesinger",
    "html_url": "https://github.com/lifesinger",
    "followers_url": "https://api.github.com/users/lifesinger/followers",
    "following_url": "https://api.github.com/users/lifesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/lifesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lifesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lifesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/lifesinger/orgs",
    "repos_url": "https://api.github.com/users/lifesinger/repos",
    "events_url": "https://api.github.com/users/lifesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lifesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "labels": [
    {
      "url": "https://api.github.com/repos/seajs/seajs/labels/documentation",
      "name": "documentation",
      "color": "444444"
    }
  ],
  "state": "closed",
  "assignee": null,
  "milestone": {
    "url": "https://api.github.com/repos/seajs/seajs/milestones/11",
    "labels_url": "https://api.github.com/repos/seajs/seajs/milestones/11/labels",
    "id": 301627,
    "number": 11,
    "title": "2.1.0",
    "description": "",
    "creator": {
      "login": "lifesinger",
      "id": 97227,
      "avatar_url": "https://2.gravatar.com/avatar/db33090541526c03c798f82aa0a5dbaa?d=https%3A%2F%2Fidenticons.github.com%2Fc29e2f0d02014ac5e5d125370865fc0d.png",
      "gravatar_id": "db33090541526c03c798f82aa0a5dbaa",
      "url": "https://api.github.com/users/lifesinger",
      "html_url": "https://github.com/lifesinger",
      "followers_url": "https://api.github.com/users/lifesinger/followers",
      "following_url": "https://api.github.com/users/lifesinger/following{/other_user}",
      "gists_url": "https://api.github.com/users/lifesinger/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lifesinger/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lifesinger/subscriptions",
      "organizations_url": "https://api.github.com/users/lifesinger/orgs",
      "repos_url": "https://api.github.com/users/lifesinger/repos",
      "events_url": "https://api.github.com/users/lifesinger/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lifesinger/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 42,
    "state": "closed",
    "created_at": "2013-04-03T01:02:47Z",
    "updated_at": "2013-08-13T02:01:34Z",
    "due_on": "2013-06-30T07:00:00Z"
  },
  "comments": 1,
  "created_at": "2012-07-06T14:51:27Z",
  "updated_at": "2013-10-11T09:59:14Z",
  "closed_at": "2012-07-06T22:35:11Z",
  "pull_request": {
    "html_url": null,
    "diff_url": null,
    "patch_url": null
  },
  "body": "# 模块标识\r\n\r\n模块标识是一个字符串，用来标识模块。在 `require`、 `require.async` 等加载函数中，第一个参数都是模块标识。\r\n\r\nSea.js 中的模块标识是 [CommonJS 模块标识](http://wiki.commonjs.org/wiki/Modules/1.1.1) 的超集:\r\n\r\n1. 一个模块标识由斜线（`/`）分隔的多项组成。\r\n1. 每一项必须是小驼峰字符串、 `.` 或 `..` 。\r\n1. 模块标识可以不包含文件后缀名，比如 `.js` 。\r\n1. 模块标识可以是 **相对** 或 **顶级** 标识。如果第一项是 `.` 或 `..`，则该模块标识是相对标识。\r\n1. 顶级标识根据模块系统的基础路径来解析。\r\n1. 相对标识相对 `require` 所在模块的路径来解析。\r\n\r\n注意，符合上述规范的标识肯定是 Sea.js 的模块标识，但 Sea.js 能识别的模块标识不需要完全符合以上规范。 比如，除了大小写字母组成的小驼峰字符串，Sea.js 的模块标识字符串还可以包含下划线（`_`）和连字符（`-`）， 甚至可以是 `http://`、`https://`、`file:///` 等协议开头的绝对路径。\r\n\r\n\r\n## 相对标识\r\n\r\n相对标识以 `.` 开头，只出现在模块环境中（`define` 的 `factory` 方法里面）。相对标识永远相对当前模块的 URI 来解析：\r\n\r\n```js\r\n// 在 http://example.com/js/a.js 的 factory 中：\r\nrequire.resolve('./b');\r\n  // => http://example.com/js/b.js\r\n\r\n// 在 http://example.com/js/a.js 的 factory 中：\r\nrequire.resolve('../c');\r\n  // => http://example.com/c.js\r\n```\r\n\r\n\r\n## 顶级标识\r\n\r\n顶级标识不以点（`.`）或斜线（`/`）开始， 会相对模块系统的基础路径（即 Sea.js 的 `base` 路径）来解析：\r\n\r\n```js\r\n// 假设 base 路径是：http://example.com/assets/\r\n\r\n// 在模块代码里：\r\nrequire.resolve('gallery/jquery/1.9.1/jquery');\r\n  // => http://example.com/assets/gallery/jquery/1.9.1/jquery.js\r\n```\r\n\r\n模块系统的基础路径即 `base` 的默认值，与 `sea.js` 的访问路径相关：\r\n\r\n```\r\n如果 sea.js 的访问路径是：\r\n  http://example.com/assets/sea.js\r\n\r\n则 base 路径为：\r\n  http://example.com/assets/\r\n```\r\n\r\n当 `sea.js` 的访问路径中含有版本号时，`base` 不会包含 `seajs/x.y.z` 字串。 当 `sea.js` 有多个版本时，这样会很方便。\r\n\r\n```\r\n如果 sea.js 的路径是：\r\n  http://example.com/assets/seajs/1.0.0/sea.js\r\n\r\n则 base 路径是：\r\n  http://example.com/assets/\r\n```\r\n\r\n\r\n当然，也可以手工配置 `base` 路径：\r\n\r\n```js\r\nseajs.config({\r\n  base: 'http://code.jquery.com/'\r\n});\r\n\r\n// 在模块代码里：\r\nrequire.resolve('jquery');\r\n  // => http://code.jquery.com/jquery.js\r\n```\r\n\r\n\r\n## 普通路径\r\n\r\n除了相对和顶级标识之外的标识都是普通路径。普通路径的解析规则，和 HTML 代码中的 `<script src=\"...\"></script>` 一样，会相对当前页面解析。\r\n\r\n```js\r\n// 假设当前页面是 http://example.com/path/to/page/index.html\r\n\r\n// 绝对路径是普通路径：\r\nrequire.resolve('http://cdn.com/js/a');\r\n  // => http://cdn.com/js/a.js\r\n\r\n// 根路径是普通路径：\r\nrequire.resolve('/js/b');\r\n  // => http://example.com/js/b.js\r\n\r\n// use 中的相对路径始终是普通路径：\r\nseajs.use('./c');\r\n  // => 加载的是 http://example.com/path/to/page/c.js\r\n\r\nseajs.use('../d');\r\n  // => 加载的是 http://example.com/path/to/d.js\r\n```\r\n\r\n**提示**：\r\n\r\n1. 顶级标识始终相对 `base` 基础路径解析。\r\n2. 绝对路径和根路径始终相对当前页面解析。\r\n3. `require` 和 `require.async` 中的相对路径相对当前模块路径来解析。\r\n4. `seajs.use` 中的相对路径始终相对当前页面来解析。\r\n\r\n\r\n\r\n## 文件后缀的自动添加规则\r\n\r\nSea.js 在解析模块标识时， 除非在路径中有问号（`?`）或最后一个字符是井号（`#`），否则都会自动添加 JS 扩展名（`.js`）。如果不想自动添加扩展名，可以在路径末尾加上井号（`#`）。\r\n\r\n```js\r\n// \".js\" 后缀可以省略：\r\nrequire.resolve('http://example.com/js/a');\r\nrequire.resolve('http://example.com/js/a.js');\r\n  // => http://example.com/js/a.js\r\n\r\n// \".css\" 后缀不可省略：\r\nrequire.resolve('http://example.com/css/a.css');\r\n  // => http://example.com/css/a.css\r\n\r\n// 当路径中有问号（\"?\"）时，不会自动添加后缀：\r\nrequire.resolve('http://example.com/js/a.json?callback=define');\r\n  // => http://example.com/js/a.json?callback=define\r\n\r\n// 当路径以井号（\"#\"）结尾时，不会自动添加后缀，且在解析时，会自动去掉井号：\r\nrequire.resolve('http://example.com/js/a.json#');\r\n  // => http://example.com/js/a.json\r\n```\r\n\r\n\r\n## 设计原则\r\n\r\n模块标识的规则就上面这些，设计的核心出发点是：\r\n\r\n1. **关注度分离**。比如书写模块 `a.js` 时，如果需要引用 `b.js`，则只需要知道 `b.js` 相对 `a.js` 的相对路径即可，无需关注其他。\r\n\r\n2.  **尽量与浏览器的解析规则一致**。比如根路径（`/xx/zz`）、绝对路径、以及传给 `use` 方法的非顶级标识，都是相对所在页面的 URL 进行解析。\r\n\r\n一旦理解了以上两点，一切都会很自然、很简单。不必刻意去记这些规则，多写写，自然就会。\r\n\r\n",
  "closed_by": {
    "login": "lifesinger",
    "id": 97227,
    "avatar_url": "https://2.gravatar.com/avatar/db33090541526c03c798f82aa0a5dbaa?d=https%3A%2F%2Fidenticons.github.com%2Fc29e2f0d02014ac5e5d125370865fc0d.png",
    "gravatar_id": "db33090541526c03c798f82aa0a5dbaa",
    "url": "https://api.github.com/users/lifesinger",
    "html_url": "https://github.com/lifesinger",
    "followers_url": "https://api.github.com/users/lifesinger/followers",
    "following_url": "https://api.github.com/users/lifesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/lifesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lifesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lifesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/lifesinger/orgs",
    "repos_url": "https://api.github.com/users/lifesinger/repos",
    "events_url": "https://api.github.com/users/lifesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lifesinger/received_events",
    "type": "User",
    "site_admin": false
  }
}
